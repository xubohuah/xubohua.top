<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Bohua xu</title>
        <link>https://antfu.me/</link>
        <description>bohua xu' Blog</description>
        <lastBuildDate>Sat, 24 Sep 2022 06:30:04 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Bohua xu</title>
            <url>https://s1.imgbed.xyz/2022/09/23/kSyVq.png</url>
            <link>https://antfu.me/</link>
        </image>
        <copyright>CC BY-NC-SA 4.0 2021 © bohua</copyright>
        <atom:link href="https://antfu.me/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[?.]]></title>
            <link>https://antfu.me/posts/jottingsl</link>
            <guid>https://antfu.me/posts/jottingsl</guid>
            <pubDate>Fri, 26 Aug 2022 08:00:00 GMT</pubDate>
            <description><![CDATA[Compound Components]]></description>
            <content:encoded><![CDATA[<p>[[toc]]</p>
<!-- > Slides: [PDF](https://antfu.me/talks/2022-01-26) | [SPA](https://talks.antfu.me/2022/vue-nation)
>
> Recording: [YouTube](https://www.youtube.com/watch?v=CW9uTys0li0)
>
> Made with <Slidev class="inline"/>  [**Slidev**](https://github.com/slidevjs/slidev) - presentation slides for developers. -->
<h1>可选链操作符（?.）</h1>
<pre><code class="language-js">// const CallALl = (...fns) =&gt;{
//   return (...args) =&gt; {
//     fns.forEach(fn=&gt;
//      fn&amp;&amp;fn(args)
//     )
//   }
// }
const callAll = (...fns) =&gt; (...args) =&gt; fns.forEach(fn =&gt; fn?.(...args))
//最近的使用，用来传递多个函数来调用,的简写的一个CallAll函数
const toggle = () =&gt; console.log('5')
const hh = (aet,hhh) =&gt;{
  console.log(aet,hhh)
}

const jh = CallALl(hh, toggle)
// jh(444,5555)
// const callAll = (...fns) =&gt; (...args) =&gt; fns.forEach(fn =&gt; fn?.(...args))
// const hh = (hhh) =&gt;{
//   console.log(hhh)
// }
// console.log(hh?.(888))
const s = {
  x:1
}
s.x=0
console.log(s?.x)
console.log(s.x)
</code></pre>
<p><strong>可选链</strong>操作符 ( <strong><code>?.</code></strong> ) 允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为空 (<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Nullish">nullish</a> ) (<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null"><code>null</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>) 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。</p>
<p>当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链操作符也是很有帮助的。</p>
<h2><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%B0%9D%E8%AF%95%E4%B8%80%E4%B8%8B">尝试一下</a></h2>
<iframe class="interactive is-taller-height" height="200" src="https://interactive-examples.mdn.mozilla.net/pages/js/expressions-optionalchainingoperator.html" title="MDN Web Docs Interactive Example" loading="lazy" data-readystate="complete" style="box-sizing: border-box; border: 0px; max-width: 100%; width: 723.636px; background-color: var(--background-secondary); border-radius: var(--elem-radius); color: var(--text-primary); height: 654px; margin: 1rem 0px; padding: 0px;"></iframe>
<h2><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E8%AF%AD%E6%B3%95">语法</a></h2>
<pre><code class="language-js">obj?.prop
obj?.[expr]
arr?.[index]
func?.(args)
</code></pre>
<h2><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E6%8F%8F%E8%BF%B0">描述</a></h2>
<p>通过连接的对象的引用或函数可能是 <code>undefined</code> 或 <code>null</code> 时，可选链操作符提供了一种方法来简化被连接对象的值访问。</p>
<p>比如，思考一个存在嵌套结构的对象 <code>obj</code>。不使用可选链的话，查找一个深度嵌套的子属性时，需要验证之间的引用，例如：</p>
<pre><code class="language-js">let nestedProp = obj.first &amp;&amp; obj.first.second;
</code></pre>
<p>为了避免报错，在访问<code>obj.first.second</code>之前，要保证 <code>obj.first</code> 的值既不是 <code>null</code>，也不是 <code>undefined</code>。如果只是直接访问 <code>obj.first.second</code>，而不对 <code>obj.first</code> 进行校验，则有可能抛出错误。</p>
<p>有了可选链操作符（<code>?.</code>），在访问 <code>obj.first.second</code> 之前，不再需要明确地校验 <code>obj.first</code> 的状态，再并用短路计算获取最终结果：</p>
<pre><code class="language-js">let nestedProp = obj.first?.second;
</code></pre>
<p>通过使用 <code>?.</code> 操作符取代 <code>.</code> 操作符，JavaScript 会在尝试访问 <code>obj.first.second</code> 之前，先隐式地检查并确定 <code>obj.first</code> 既不是 <code>null</code> 也不是 <code>undefined</code>。如果<code>obj.first</code> 是 <code>null</code> 或者 <code>undefined</code>，表达式将会短路计算直接返回 <code>undefined</code>。</p>
<p>这等价于以下表达式，但实际上没有创建临时变量：</p>
<pre><code class="language-js">let temp = obj.first;
let nestedProp = ((temp === null || temp === undefined) ? undefined : temp.second);
</code></pre>
<p>Copy to Clipboard</p>
<h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%8F%AF%E9%80%89%E9%93%BE%E4%B8%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8">可选链与函数调用</a></h3>
<p>当尝试调用一个可能不存在的方法时也可以使用可选链。这将是很有帮助的，比如，当使用一个 API 的方法可能不可用时，要么因为实现的版本问题要么因为当前用户的设备不支持该功能。</p>
<p>函数调用时如果被调用的方法不存在，使用可选链可以使表达式自动返回<code>undefined</code>而不是抛出一个异常。</p>
<pre><code class="language-js">let result = someInterface.customMethod?.();
</code></pre>
<p><strong>备注：</strong> 如果存在一个属性名且不是函数，使用 <code>?.</code> 仍然会产生一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError"><code>TypeError</code></a> 异常 (<code>x.y is not a function</code>).</p>
<p><strong>备注：</strong> 如果 <code>someInterface</code> 自身是 <code>null</code> 或者 <code>undefined</code> ，异常 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError"><code>TypeError</code></a> 仍会被抛出 <code>someInterface is null</code> 如果你希望允许 <code>someInterface</code> 也为 <code>null</code> 或者 <code>undefined</code> ，那么你需要像这样写 <code>someInterface?.customMethod?.()</code></p>
<h4>处理可选的回调函数或者事件处理器</h4>
<p>如果使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">解构赋值</a>来解构的一个对象的回调函数或 fetch 方法，你可能得到不能当做函数直接调用的不存在的值，除非你已经校验了他们的存在性。使用<code>?.</code>的你可以忽略这些额外的校验：</p>
<pre><code class="language-js">//  ES2019 的写法
function doSomething(onContent, onError) {
  try {
    // ... do something with the data
  }
  catch (err) {
    if (onError) { // 校验 onError 是否真的存在
      onError(err.message);
    }
  }
}
</code></pre>
<pre><code class="language-js">// 使用可选链进行函数调用
function doSomething(onContent, onError) {
  try {
   // ... do something with the data
  }
  catch (err) {
    onError?.(err.message); // 如果 onError 是 undefined 也不会有异常
  }
}
</code></pre>
<h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%8F%AF%E9%80%89%E9%93%BE%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F">可选链和表达式</a></h3>
<p>当使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Property_Accessors#%E6%96%B9%E6%8B%AC%E5%8F%B7%E8%A1%A8%E7%A4%BA%E6%B3%95">方括号与属性名</a>的形式来访问属性时，你也可以使用可选链操作符：</p>
<pre><code class="language-js">let nestedProp = obj?.['prop' + 'Name'];
</code></pre>
<h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%8F%AF%E9%80%89%E9%93%BE%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%8E%E8%B5%8B%E5%80%BC">可选链不能用于赋值</a></h3>
<pre><code class="language-js">let object = {};
object?.property = 1; // Uncaught SyntaxError: Invalid left-hand side in assignment
</code></pre>
<h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%8F%AF%E9%80%89%E9%93%BE%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0">可选链访问数组元素</a></h3>
<pre><code class="language-js">let arrayItem = arr?.[42];
</code></pre>
<h2><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E4%BE%8B%E5%AD%90">例子</a></h2>
<h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%9F%BA%E6%9C%AC%E4%BE%8B%E5%AD%90">基本例子</a></h3>
<p>如下的例子在一个不含 <code>bar</code> 成员的 Map 中查找 <code>bar</code> 成员的 <code>name</code> 属性，因此结果是 <code>undefined</code>。</p>
<pre><code class="language-js">let myMap = new Map();
myMap.set(&quot;foo&quot;, {name: &quot;baz&quot;, desc: &quot;inga&quot;});

let nameBar = myMap.get(&quot;bar&quot;)?.name;
</code></pre>
<h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E7%9F%AD%E8%B7%AF%E8%AE%A1%E7%AE%97">短路计算</a></h3>
<p>当在表达式中使用可选链时，如果左操作数是 <code>null</code> 或 <code>undefined</code>，表达式将不会被计算，例如：</p>
<pre><code class="language-js">let potentiallyNullObj = null;
let x = 0;
let prop = potentiallyNullObj?.[x++];

console.log(x); // x 将不会被递增，依旧输出 0
</code></pre>
<h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E8%BF%9E%E7%94%A8%E5%8F%AF%E9%80%89%E9%93%BE%E6%93%8D%E4%BD%9C%E7%AC%A6">连用可选链操作符</a></h3>
<p>可以连续使用可选链读取多层嵌套结构：</p>
<pre><code class="language-js">let customer = {
  name: &quot;Carl&quot;,
  details: {
    age: 82,
    location: &quot;Paradise Falls&quot; // details 的 address 属性未有定义
  }
};
let customerCity = customer.details?.address?.city;

// … 可选链也可以和函数调用一起使用
let duration = vacations.trip?.getTime?.();
</code></pre>
<h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E4%BD%BF%E7%94%A8%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E7%AC%A6">使用空值合并操作符</a></h3>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"><code>空值合并操作符</code></a>可以在使用可选链时设置一个默认值：</p>
<pre><code class="language-js">let customer = {
  name: &quot;Carl&quot;,
  details: { age: 82 }
};
let customerCity = customer?.city ?? &quot;暗之城&quot;;
console.log(customerCity); // “暗之城”
</code></pre>
<h2>MDN</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining</a></p>
]]></content:encoded>
            <author>hi@antfu.me (Bohua xu)</author>
        </item>
        <item>
            <title><![CDATA[useContext -useReducer]]></title>
            <link>https://antfu.me/posts/destructuring-with-object-or-array</link>
            <guid>https://antfu.me/posts/destructuring-with-object-or-array</guid>
            <pubDate>Tue, 21 Dec 2021 16:00:00 GMT</pubDate>
            <description><![CDATA[Prefer object destructure or array? Can we support both?]]></description>
            <content:encoded><![CDATA[<p>[[toc]]</p>
<h2>useContext</h2>
<pre><code class="language-js">const CountContext = React.createContext()
//CountProvider和useCount写在外部导入
function CountProvider(props) {
  const [count, setCount] = React.useState(0)
  const value = [count, setCount]
  return &lt;CountContext.Provider value={value} {...props} /&gt;
}

function useCount() {                        //封装useCount
  const context = React.useContext(CountContext)
  if (!context) {
    throw new Error('useCount must be used within a CountProvider')
  }
  return context
}

function CountDisplay() {
  const [count] = useCount()
  return &lt;div&gt;{`The current count is ${count}`}&lt;/div&gt;
}

function Counter() {
  const [, setCount] = useCount()
  const increment = () =&gt; setCount(c =&gt; c + 1)
  return &lt;button onClick={increment}&gt;Increment count&lt;/button&gt;
}

function App() {
  return (
    &lt;div&gt;
      &lt;CountProvider&gt;
        &lt;CountDisplay /&gt;
        &lt;Counter /&gt;
      &lt;/CountProvider&gt;
    &lt;/div&gt;
  )
}
</code></pre>
<pre><code class="language-js">const CountContext = React.createContext()

function CountProvider(props) {
  const [count, setCount] = React.useState(0)
  const value = [count, setCount]
  // const value = React.useState(0)
  return &lt;CountContext.Provider value={value} {...props} /&gt;
}

function CountDisplay() {
  const [count] = React.useContext(CountContext)
  return &lt;div&gt;{`The current count is ${count}`}&lt;/div&gt;
}

function Counter() {
  const [, setCount] = React.useContext(CountContext)
  const increment = () =&gt; setCount(c =&gt; c + 1)
  return &lt;button onClick={increment}&gt;Increment count&lt;/button&gt;
}

function App() {
  return (
    &lt;div&gt;
      &lt;CountProvider&gt;
        &lt;CountDisplay /&gt;
        &lt;Counter /&gt;
      &lt;/CountProvider&gt;
    &lt;/div&gt;
  )
}
</code></pre>
<h2>配合useReducer使用</h2>
<p>CounterCotext.jsx</p>
<pre><code class="language-js">const CounterContext = React.createContext(null)
export default CounterContext
</code></pre>
<p>CounterReducer.jsx</p>
<pre><code class="language-js">const CounterReducer = (state,action)=&gt;{
    switch (action.type){
        case 'counter/increment':
         return state + 1;
        case 'counter/decrement':
         return state - 1;
        default:
         return state;
    }
}
export default CounterReducer
</code></pre>
<p>App.jsx</p>
<pre><code class="language-js">import  CounterContext
import  CounterReducer

function App() {
  const [state,dispacth] = React.useReducer(CounterReducer,0)
    
  return (
    &lt;div&gt;
      &lt;CounterContext.Provider value={{state,dispath}}&gt;
        &lt;Counter /&gt;
      &lt;/CounterContext.Provider&gt;
    &lt;/div&gt;
  )
}
</code></pre>
<p>Counter.jsx</p>
<pre><code class="language-js">import  useContext

const Counter = () =&gt;{
 const count = React.useContext(CounterContext)
 const dispatch = count.dispatch
    
 return (
    &lt;div&gt;
      &lt;button onClick={()=&gt;{dispatch({type:'counter/increment'})}}&gt;&lt;/button&gt;
      &lt;span&gt;{count.state}&lt;/span&gt;
      &lt;button onClick={()=&gt;{dispatch({type:'counter/decrement'})}}&gt;&lt;/button&gt;
    &lt;/div&gt;
  )
}
</code></pre>
]]></content:encoded>
            <author>hi@antfu.me (Bohua xu)</author>
            <enclosure url="https://antfu.me/images/destructuring.png" length="0" type="image/png"/>
        </item>
    </channel>
</rss>